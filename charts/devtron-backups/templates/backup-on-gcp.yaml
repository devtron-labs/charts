{{- if .Values.global.GCP.CREDENTIALS.enabled }}
apiVersion: v1
data:
  GOOGLE_APPLICATION_CREDENTIALS: {{ $.Values.global.GCP.CREDENTIALS.GCP_CREDENTIALS_JSON }}
kind: Secret
metadata:
  name: gcp-credentials
  namespace: devtroncd
type: Opaque
{{ end -}}
---
{{- if .Values.global.GCP.enabled }}
{{- if .Values.postgres_backup.enabled }}
{{ if semverCompare ">=1.21-0" .Capabilities.KubeVersion.GitVersion -}}
apiVersion: batch/v1
{{ else -}}
apiVersion: batch/v1beta1
{{ end -}}
kind: CronJob
metadata:
  name: postgres-app-backup-cronjob
  namespace: devtroncd
spec:
  schedule: {{ .Values.global.schedule }}
  jobTemplate:
    spec:
      template:
        spec:
          initContainers:
          - name: postgres-app-backup-cronjob
            image: {{ .Values.postgres_backup.postgresImage | default "postgres:12" }}
            volumeMounts:
            - mountPath: /tmp
              name: psql-volume
            env:
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  key: PG_PASSWORD
                  name: {{ .Values.postgres_backup.secretName }}
            imagePullPolicy: Always
            args:
            - /bin/bash
            - -c
            - pg_dumpall -h {{ .Values.postgres_backup.host | default "postgresql-postgresql.devtroncd" }} --exclude-database=clairv4 -p 5432 -U postgres --no-privileges > /tmp/backup.tar;
          containers:
          - name: gcloud-cli-for-cloud-storage-upload
            image: {{ .Values.global.GCP.image | default "google/cloud-sdk:alpine" }}
            volumeMounts:
            - mountPath: /tmp
              name: psql-volume
            env:
            - name: GCS_BUCKET
              valueFrom:
                secretKeyRef:
                  name: devtron-gcp-backup-secret
                  key: GCS_BUCKET
            {{- if .Values.global.GCP.CREDENTIALS.enabled }}
            - name: gcp_credentials
              valueFrom:
                secretKeyRef:
                  name: gcp-credentials
                  key: GOOGLE_APPLICATION_CREDENTIALS
            {{- end }}
            imagePullPolicy: Always
            args:
            - /bin/bash
            - -c
          {{- if $.Values.global.GCP.encryption.enabled }}          
            - echo $gcp_credentials > /tmp/gcp_credentials.json ; gcloud auth activate-service-account --key-file=/tmp/gcp_credentials.json ; date1=$(date +%Y%m%d-%H%M); gpg -c --batch --passphrase {{ .Values.global.GCP.encryption.passphrase }} /tmp/backup.tar; rm -rvf /tmp/backup.tar; mv /tmp/backup.tar.gpg /tmp/backup-$date1.tar.gpg; gcloud storage cp /tmp/backup-$date1.tar.gpg $GCS_BUCKET/postgres/;
          {{- else}}
            - echo $gcp_credentials > /tmp/gcp_credentials.json ; gcloud auth activate-service-account --key-file=/tmp/gcp_credentials.json ; date1=$(date +%Y%m%d-%H%M); mv /tmp/backup.tar /tmp/backup-$date1.tar; gcloud storage cp /tmp/backup-$date1.tar $GCS_BUCKET/postgres/;
          {{- end }}
          volumes:
          - name: psql-volume
            emptyDir: {}
          restartPolicy: OnFailure
          serviceAccountName: {{ .Values.argocd_backup.serviceAccountName }}
{{- end }}
---
{{- if .Values.argocd_backup.enabled }}
{{ if semverCompare ">=1.21-0" .Capabilities.KubeVersion.GitVersion -}}
apiVersion: batch/v1
{{ else -}}
apiVersion: batch/v1beta1
{{ end -}}
kind: CronJob
metadata:
    name: argocd-app-backup-cronjob
    namespace: devtroncd
spec:
  schedule: {{ .Values.global.schedule }}
  jobTemplate:
    spec:
      template:
        spec:
          initContainers:
          - name: argocd-app-backup-job
            image: {{ .Values.argocd_backup.argocdImage | default "quay.io/argoproj/argocd:v2.4.0" }}
            volumeMounts:
            - mountPath: /cache
              name: argocd-volume
            env:
            imagePullPolicy: Always
            args:
            - /bin/bash
            - -c
            - {{ .Values.argocd_backup.args | default "argocd admin export -n devtroncd > /cache/backup.yaml" }}
          containers:
          - name: gcloud-cli-for-cloud-storage-upload
            image:  {{ .Values.global.GCP.image | default "google/cloud-sdk:alpine" }}
            volumeMounts:
            - mountPath: /cache
              name: argocd-volume
            env:
            - name: GCS_BUCKET
              valueFrom:
                secretKeyRef:
                  name: devtron-gcp-backup-secret
                  key: GCS_BUCKET
            {{- if .Values.global.GCP.CREDENTIALS.enabled }}
            - name: gcp_credentials
              valueFrom:
                secretKeyRef:
                  name: gcp-credentials
                  key: GOOGLE_APPLICATION_CREDENTIALS
            {{- end }}
            imagePullPolicy: Always
            args:
            - /bin/bash
            - -c
          {{- if $.Values.global.GCP.encryption.enabled }}
            - echo $gcp_credentials > /tmp/gcp_credentials.json ; gcloud auth activate-service-account --key-file=/tmp/gcp_credentials.json ; date1=$(date +%Y%m%d-%H%M); gpg -c --batch --passphrase {{ .Values.global.GCP.encryption.passphrase }} /cache/backup.yaml; rm -rvf /cache/backup.yaml; mv /cache/backup.yaml.gpg /cache/backup-$date1.yaml.gpg; gcloud storage cp /cache/backup-$date1.yaml.gpg $GCS_BUCKET/argocd/;
          {{- else}}
            - echo $gcp_credentials > /tmp/gcp_credentials.json ; gcloud auth activate-service-account --key-file=/tmp/gcp_credentials.json ; date1=$(date +%Y%m%d-%H%M); mv /cache/backup.yaml /cache/backup-$date1.yaml; gcloud storage cp /cache/backup-$date1.yaml $GCS_BUCKET/argocd/;
          {{- end }}
          volumes:
          - name: argocd-volume
            emptyDir: {}
          restartPolicy: OnFailure
          serviceAccountName: {{ .Values.argocd_backup.serviceAccountName }}
{{- end }}
{{- end }}