{{- if .Values.global.GCP.enabled }}
{{- if or .Values.postgres_backup.enabled .Values.argocd_backup.enabled }}
apiVersion: v1
kind: Secret
metadata:
  name: devtron-gcp-backup-secret
  namespace: devtroncd
type: opaque
data:
    GCS_BUCKET: {{ .Values.global.GCP.GCS_BUCKET_NAME | b64enc }}
    {{- if .Values.global.GCP.CREDENTIALS.enabled }}
    GOOGLE_APPLICATION_CREDENTIALS: {{ $.Values.global.GCP.CREDENTIALS.GCP_CREDENTIALS_JSON }}
    {{- end }}
{{- end }}
---
{{- if .Values.postgres_backup.enabled }}
{{ if semverCompare ">=1.21-0" .Capabilities.KubeVersion.GitVersion -}}
apiVersion: batch/v1
{{ else -}}
apiVersion: batch/v1beta1
{{ end -}}
kind: CronJob
metadata:
  name: postgres-app-backup-cronjob
  namespace: devtroncd
spec:
  timeZone: {{ .Values.global.timezone | default "UTC" }}
  schedule: "{{ .Values.global.schedule }}"
  jobTemplate:
    spec:
      template:
        {{- if or $.Values.postgres_backup.labels $.Values.postgres_backup.annotations }}
        metadata:
          {{- if $.Values.postgres_backup.labels }}
          labels:
          {{ toYaml .Values.postgres_backup.labels | indent 4 }}
          {{- end }}
          {{- if $.Values.postgres_backup.annotations }}
          annotations:
          {{ toYaml .Values.postgres_backup.annotations | indent 4 }}
          {{- end }}
        {{- end }}
        spec:
          initContainers:
          - name: postgres-app-backup-cronjob
            image: {{ .Values.postgres_backup.postgresImage | default "postgres:12" }}
            volumeMounts:
            - mountPath: /postgres
              name: psql-volume
            env:
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  key: PG_PASSWORD
                  name: {{ .Values.postgres_backup.secretName }}
            imagePullPolicy: Always
            args:
            - /bin/bash
            - -c
            - set -ex; pg_dumpall -h {{ .Values.postgres_backup.host | default "postgresql-postgresql.devtroncd" }} --exclude-database=clairv4 -p 5432 -U postgres --no-privileges > /postgres/backup.tar; echo $? ; du -sh /postgres/backup.tar
            resources:
{{ toYaml .Values.postgres_backup.resources | indent 14 }}
          containers:
          - name: gcloud-cli-for-cloud-storage-upload
            image: {{ .Values.global.GCP.image | default "google/cloud-sdk:alpine" }}
            volumeMounts:
            - mountPath: /postgres
              name: psql-volume
            env:
            - name: GCS_BUCKET
              valueFrom:
                secretKeyRef:
                  name: devtron-gcp-backup-secret
                  key: GCS_BUCKET
            {{- if .Values.global.GCP.CREDENTIALS.enabled }}
            - name: gcp_credentials
              valueFrom:
                secretKeyRef:
                  name: devtron-gcp-backup-secret
                  key: GOOGLE_APPLICATION_CREDENTIALS
            {{- end }}
            imagePullPolicy: Always
            resources:
{{ toYaml .Values.postgres_backup.resources | indent 14 }}
            args:
            - /bin/bash
            - -c
          {{- if $.Values.global.GCP.encryption.enabled }}          
            - set -ex; echo $gcp_credentials > /postgres/gcp_credentials.json ; gcloud auth activate-service-account --key-file=/postgres/gcp_credentials.json ; date1=$(date +%Y%m%d-%H%M); gpg -c --batch --passphrase {{ .Values.global.GCP.encryption.passphrase }} /postgres/backup.tar; rm -rvf /postgres/backup.tar; mv /postgres/backup.tar.gpg /postgres/backup-$date1.tar.gpg; gsutil cp /postgres/backup-$date1.tar.gpg gs://$GCS_BUCKET/postgres/;
          {{- else}}
            - set -ex; echo $gcp_credentials > /postgres/gcp_credentials.json ; gcloud auth activate-service-account --key-file=/postgres/gcp_credentials.json ; date1=$(date +%Y%m%d-%H%M); mv /postgres/backup.tar /postgres/backup-$date1.tar; gsutil cp /postgres/backup-$date1.tar gs://$GCS_BUCKET/postgres/;
          {{- end }}
          volumes:
          - name: psql-volume
            emptyDir: {}
          {{- if $.Values.global.nodeSelector }}
          nodeselector: 
{{ toYaml .Values.global.nodeSelector | indent 12 }}
          {{- end }}
          {{- if $.Values.global.tolerations }}
          tolerations:
{{ toYaml .Values.global.tolerations | indent 12 }}
          {{- end }}
          restartPolicy: OnFailure
          serviceAccountName: {{ .Values.postgres_backup.serviceAccountName | default "default" }}
{{- end }}
---
{{- if .Values.argocd_backup.enabled }}
{{ if semverCompare ">=1.21-0" .Capabilities.KubeVersion.GitVersion -}}
apiVersion: batch/v1
{{ else -}}
apiVersion: batch/v1beta1
{{ end -}}
kind: CronJob
metadata:
    name: argocd-app-backup-cronjob
    namespace: devtroncd
spec:
  timeZone: {{ .Values.global.timezone | default "UTC" }}
  schedule: "{{ .Values.global.schedule }}"
  jobTemplate:
    spec:
      template:
        {{- if or $.Values.postgres_backup.labels $.Values.postgres_backup.annotations }}
        metadata:
          {{- if $.Values.postgres_backup.labels }}
          labels:
          {{ toYaml .Values.postgres_backup.labels | indent 4 }}
          {{- end }}
          {{- if $.Values.postgres_backup.annotations }}
          annotations:
          {{ toYaml .Values.postgres_backup.annotations | indent 4 }}
          {{- end }}
        {{- end }}
        spec:
          initContainers:
          - name: argocd-app-backup-job
            image: {{ .Values.argocd_backup.argocdImage | default "quay.io/argoproj/argocd:v2.4.0" }}
            volumeMounts:
            - mountPath: /argocd
              name: argocd-volume
            env:
            imagePullPolicy: Always
            args:
            - /bin/bash
            - -c
            - {{ .Values.argocd_backup.args | default "argocd admin export -n devtroncd > /argocd/backup.yaml" }}
            resources:
{{ toYaml .Values.argocd_backup.resources | indent 14 }}
          containers:
          - name: gcloud-cli-for-cloud-storage-upload
            image:  {{ .Values.global.GCP.image | default "google/cloud-sdk:alpine" }}
            volumeMounts:
            - mountPath: /argocd
              name: argocd-volume
            env:
            - name: GCS_BUCKET
              valueFrom:
                secretKeyRef:
                  name: devtron-gcp-backup-secret
                  key: GCS_BUCKET
            {{- if .Values.global.GCP.CREDENTIALS.enabled }}
            - name: gcp_credentials
              valueFrom:
                secretKeyRef:
                  name: devtron-gcp-backup-secret
                  key: GOOGLE_APPLICATION_CREDENTIALS
            {{- end }}
            imagePullPolicy: Always
            resources:
{{ toYaml .Values.argocd_backup.resources | indent 14 }}
            args:
            - /bin/bash
            - -c
          {{- if $.Values.global.GCP.encryption.enabled }}
            - set -ex; echo $gcp_credentials > /argocd/gcp_credentials.json ; gcloud auth activate-service-account --key-file=/argocd/gcp_credentials.json ; date1=$(date +%Y%m%d-%H%M); gpg -c --batch --passphrase {{ .Values.global.GCP.encryption.passphrase }} /argocd/backup.yaml; rm -rvf /argocd/backup.yaml; mv /argocd/backup.yaml.gpg /argocd/backup-$date1.yaml.gpg; gsutil cp /argocd/backup-$date1.yaml.gpg gs://$GCS_BUCKET/argocd/;
          {{- else}}
            - set -ex; echo $gcp_credentials > /argocd/gcp_credentials.json ; gcloud auth activate-service-account --key-file=/argocd/gcp_credentials.json ; date1=$(date +%Y%m%d-%H%M); mv /argocd/backup.yaml /argocd/backup-$date1.yaml; gsutil cp /argocd/backup-$date1.yaml gs://$GCS_BUCKET/argocd/;
          {{- end }}
          volumes:
          - name: argocd-volume
            emptyDir: {}
          {{- if $.Values.global.nodeSelector }}
          nodeselector: 
{{ toYaml .Values.global.nodeSelector | indent 12 }}
          {{- end }}
          {{- if $.Values.global.tolerations }}
          tolerations:
{{ toYaml .Values.global.tolerations | indent 12 }}
          {{- end }}
          restartPolicy: OnFailure
          serviceAccountName: {{ .Values.argocd_backup.serviceAccountName }}
{{- end }}
{{- end }}
