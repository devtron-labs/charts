{{- if .Values.global.AZURE.enabled }}
{{- if or .Values.postgres_backup.enabled .Values.argocd_backup.enabled }} 
apiVersion: v1
kind: Secret
metadata:
  name: devtron-azure-backup-secret
  namespace: devtroncd
type: opaque
data:
    AZURE_BLOB_ACCOUNT_NAME: {{ .Values.global.AZURE.AZURE_BLOB_ACCOUNT_NAME | b64enc }}
    AZURE_ACCOUNT_KEY: {{ .Values.global.AZURE.AZURE_ACCOUNT_KEY | b64enc }}
    AZURE_BLOB_CONTAINER_FOR_POSTGRES: {{ .Values.global.AZURE.AZURE_BLOB_CONTAINER_FOR_POSTGRES | b64enc }}
    AZURE_BLOB_CONTAINER_FOR_ARGOCD: {{ .Values.global.AZURE.AZURE_BLOB_CONTAINER_FOR_ARGOCD | b64enc }}
{{- end }}
---
{{- if .Values.postgres_backup.enabled }}
{{ if semverCompare ">=1.21-0" .Capabilities.KubeVersion.GitVersion -}}
apiVersion: batch/v1
{{ else -}}
apiVersion: batch/v1beta1
{{ end -}}
kind: CronJob
metadata:
  name: postgres-app-backup-cronjob
  namespace: devtroncd
spec:
  schedule: {{ .Values.global.schedule }}
  jobTemplate:
    spec:
      template:
        spec:
          initContainers:
          - name: postgres-app-backup-cronjob
            image: {{ .Values.postgres_backup.postgresImage | default "postgres:12" }}
            volumeMounts:
            - mountPath: /postgres
              name: psql-volume
            env:
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  key: PG_PASSWORD
                  name: {{ .Values.postgres_backup.secretName }} 
            imagePullPolicy: Always
            args:
            - /bin/bash
            - -c
            - set -ex ; pg_dumpall -h {{ .Values.postgres_backup.host | default "postgresql-postgresql.devtroncd" }} --exclude-database=clairv4 -p 5432 -U postgres --no-privileges > /postgres/backup.tar; echo $? ; du -sh /postgres/backup.tar 
            resources:
{{ toYaml .Values.postgres_backup.resources | indent 13 }}
          containers:
          - name: az-cli-for-upload
            image: {{ .Values.global.AZURE.image | default "quay.io/devtron/k8s-utils:az-cli-ubuntu" }}
            volumeMounts:
            - mountPath: /postgres
              name: psql-volume
            env:
            - name: AZURE_BLOB_ACCOUNT_NAME
              valueFrom:
                secretKeyRef:
                  name: devtron-azure-backup-secret
                  key: AZURE_BLOB_ACCOUNT_NAME
            - name: AZURE_ACCOUNT_KEY
              valueFrom:
                secretKeyRef:
                  name: devtron-azure-backup-secret
                  key: AZURE_ACCOUNT_KEY
            - name: AZURE_BLOB_CONTAINER_FOR_POSTGRES
              valueFrom:
                secretKeyRef:
                  name: devtron-azure-backup-secret
                  key: AZURE_BLOB_CONTAINER_FOR_POSTGRES
            - name: AZURE_BLOB_CONTAINER_FOR_ARGOCD
              valueFrom:
                secretKeyRef:
                  name: devtron-azure-backup-secret
                  key: AZURE_BLOB_CONTAINER_FOR_ARGOCD
            imagePullPolicy: Always
            resources:
{{ toYaml .Values.postgres_backup.resources | indent 13 }}
            args:
            - /bin/bash
            - -c
            {{- if $.Values.global.AZURE.encryption.enabled }}
            - set -ex; date1=$(date +%Y%m%d-%H%M); gpg -c --batch --passphrase {{ .Values.global.AZURE.encryption.passphrase }} /postgres/backup.tar; rm -rvf /postgres/backup.tar; mv /postgres/backup.tar.gpg /postgres/backup-$date1.tar.gpg; az storage blob upload --account-name $AZURE_BLOB_ACCOUNT_NAME --container-name $AZURE_BLOB_CONTAINER_FOR_POSTGRES --file /postgres/backup-$date1.tar.gpg --account-key $AZURE_ACCOUNT_KEY; 
            {{- else }} 
            - set -ex; date1=$(date +%Y%m%d-%H%M); mv /postgres/backup.tar /postgres/backup-$date1.tar; az storage blob upload --account-name $AZURE_BLOB_ACCOUNT_NAME --container-name $AZURE_BLOB_CONTAINER_FOR_POSTGRES --file /postgres/backup-$date1.tar --account-key $AZURE_ACCOUNT_KEY; 
            {{- end }}
          volumes:
          - name: psql-volume
            emptyDir: {}
          restartPolicy: OnFailure
{{- end }}          
---
{{- if .Values.argocd_backup.enabled }}
{{ if semverCompare ">=1.21-0" .Capabilities.KubeVersion.GitVersion -}}
apiVersion: batch/v1
{{ else -}}
apiVersion: batch/v1beta1
{{ end -}}
kind: CronJob
metadata:
  name: argocd-app-backup-cronjob
  namespace: devtroncd
spec:
  schedule: {{ .Values.global.schedule }}
  jobTemplate:
    spec:
      template:
        spec:
          initContainers:
          - name: argocd-app-backup-job
            image: {{ .Values.argocd_backup.argocdImage | default "quay.io/argoproj/argocd:v2.4.0" }}
            volumeMounts:
            - mountPath: /argocd
              name: argocd-volume
            env:
            imagePullPolicy: Always
            args:
            - /bin/bash
            - -c
            - {{ .Values.argocd_backup.args | default "argocd admin export -n devtroncd > /argocd/backup.yaml" }}
            resources:
{{ toYaml .Values.argocd_backup.resources | indent 13 }}
          containers:
          - name: az-cli-for-upload
            image: {{ .Values.global.AZURE.image  | default "quay.io/devtron/k8s-utils:az-cli-ubuntu"  }}
            volumeMounts:
            - mountPath: /argocd
              name: argocd-volume
            env:
            - name: AZURE_BLOB_ACCOUNT_NAME
              valueFrom:
                secretKeyRef:
                  name: devtron-azure-backup-secret
                  key: AZURE_BLOB_ACCOUNT_NAME
            - name: AZURE_ACCOUNT_KEY
              valueFrom:
                secretKeyRef:
                  name: devtron-azure-backup-secret
                  key: AZURE_ACCOUNT_KEY
            - name: AZURE_BLOB_CONTAINER_FOR_POSTGRES
              valueFrom:
                secretKeyRef:
                  name: devtron-azure-backup-secret
                  key: AZURE_BLOB_CONTAINER_FOR_POSTGRES
            - name: AZURE_BLOB_CONTAINER_FOR_ARGOCD
              valueFrom:
                secretKeyRef:
                  name: devtron-azure-backup-secret
                  key: AZURE_BLOB_CONTAINER_FOR_ARGOCD
            imagePullPolicy: Always
            resources:
{{ toYaml .Values.argocd_backup.resources | indent 13 }}
            args:
            - /bin/bash
            - -c
            {{- if $.Values.global.AZURE.encryption.enabled }}
            - set -ex; date1=$(date +%Y%m%d-%H%M); gpg -c --batch --passphrase {{ .Values.global.AZURE.encryption.passphrase }} /argocd/backup.yaml ;rm -rvf /argocd/backup.yaml ;mv /argocd/backup.yaml.gpg /argocd/backup-$date1.yaml.gpg; az storage blob upload --account-name $AZURE_BLOB_ACCOUNT_NAME --container-name $AZURE_BLOB_CONTAINER_FOR_ARGOCD --file /argocd/backup-$date1.yaml.gpg --account-key $AZURE_ACCOUNT_KEY;  
            {{- else }} 
            - set -ex; date1=$(date +%Y%m%d-%H%M); mv /argocd/backup.yaml /argocd/backup-$date1.yaml; az storage blob upload --account-name $AZURE_BLOB_ACCOUNT_NAME --container-name $AZURE_BLOB_CONTAINER_FOR_ARGOCD --file /argocd/backup-$date1.yaml --account-key $AZURE_ACCOUNT_KEY;  
            {{- end }}
          volumes:
          - name: argocd-volume
            emptyDir: {}
          restartPolicy: OnFailure
          serviceAccountName: {{ .Values.argocd_backup.serviceAccountName }}
{{- end }}
{{- end }}
