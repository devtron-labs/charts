{{- if .Values.global.S3.enabled }}
{{- if or .Values.postgres_backup.enabled .Values.argocd_backup.enabled }}
apiVersion: v1
kind: Secret
metadata:
  name: devtron-s3-backup-secret
  namespace: devtroncd
type: Opaque
data:
  S3_BUCKET_NAME: {{ .Values.global.S3.S3_BUCKET_NAME | b64enc }}
  {{- if eq .Values.global.S3.NODE_ROLE "false" }}
  AWS_ACCESS_KEY: {{ .Values.global.S3.S3_ACCESS_KEY | b64enc }}
  AWS_SECRET_KEY: {{ .Values.global.S3.S3_SECRET_KEY | b64enc }}
  {{- end }}
  {{- if .Values.global.S3.CA_BUNDLE }}
  AWS_CA_BUNDLE: {{ .Values.global.S3.CA_BUNDLE | b64enc }}
  {{- end }}
  AWS_REGION: {{ .Values.global.S3.AWS_REGION | default "us-east-1" | b64enc }}
{{- end }}
---
{{- if .Values.postgres_backup.enabled }}
{{ if semverCompare ">=1.21-0" .Capabilities.KubeVersion.GitVersion -}}
apiVersion: batch/v1
{{ else -}}
apiVersion: batch/v1beta1
{{ end -}}
kind: CronJob
metadata:
  name: postgres-app-backup-cronjob
  namespace: devtroncd
spec:
  timeZone: {{ .Values.global.timezone | default "UTC" }}
  schedule: "{{ .Values.global.schedule }}"
  jobTemplate:
    spec:
      template:
        {{- if or $.Values.postgres_backup.labels $.Values.postgres_backup.annotations }}
        metadata:
          {{- if $.Values.postgres_backup.labels }}
          labels:
          {{ toYaml .Values.postgres_backup.labels | indent 4 }}
          {{- end }}
          {{- if $.Values.postgres_backup.annotations }}
          annotations:
          {{ toYaml .Values.postgres_backup.annotations | indent 4 }}
          {{- end }}
        {{- end }}
        spec:
          initContainers:
          - name: postgres-app-backup-cronjob
            image: {{ .Values.postgres_backup.postgresImage | default "postgres:12" }}
            volumeMounts:
            - mountPath: /postgres
              name: psql-volume
            env:
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  key: PG_PASSWORD
                  name: {{ .Values.postgres_backup.secretName }}
            imagePullPolicy: Always
            args:
            - /bin/bash
            - -c
            - set -ex; pg_dumpall -h {{ .Values.postgres_backup.host | default "postgresql-postgresql.devtroncd" }} --exclude-database=clairv4 -p 5432 -U postgres --no-privileges > /postgres/backup.tar; echo $? ; du -sh /postgres/backup.tar
            resources:
{{ toYaml .Values.postgres_backup.resources | indent 14 }}
          containers:
          - name: aws-cli-for-s3-download
            image: {{ .Values.global.S3.image | default "quay.io/devtron/k8s-utils:ubuntu-aws-cli-multi-arch-1" }}
            volumeMounts:
            - mountPath: /postgres
              name: psql-volume
            env:
            {{- if eq .Values.global.S3.NODE_ROLE "false" }}
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  name: devtron-s3-backup-secret
                  key: AWS_ACCESS_KEY
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: devtron-s3-backup-secret
                  key: AWS_SECRET_KEY
            {{- end }}
            - name: S3_BUCKET
              valueFrom:
                secretKeyRef:
                  name: devtron-s3-backup-secret
                  key: S3_BUCKET_NAME
            - name: AWS_DEFAULT_REGION
              valueFrom:
                secretKeyRef:
                  name: devtron-s3-backup-secret
                  key: AWS_REGION
            {{- if .Values.global.S3.CA_BUNDLE }}
            - name: CA_BUNDLE
              valueFrom:
                secretKeyRef:
                  name: devtron-s3-backup-secret
                  key: AWS_CA_BUNDLE
            {{- end }}
            imagePullPolicy: Always
            resources:
{{ toYaml .Values.postgres_backup.resources | indent 14 }}
            args:
            - /bin/bash
            - -c
            - |
{{ include "devtron.postgresBackup" . | indent 6 }}
          volumes:
          - name: psql-volume
            emptyDir: {}
          {{- if $.Values.global.nodeSelector }}
          nodeselector: 
{{ toYaml .Values.global.nodeSelector | indent 12 }}
          {{- end }}
          {{- if $.Values.global.tolerations }}
          tolerations:
{{ toYaml .Values.global.tolerations | indent 12 }}
          {{- end }}
          restartPolicy: OnFailure
{{- end }}
---
{{- if .Values.argocd_backup.enabled }}
{{ if semverCompare ">=1.21-0" .Capabilities.KubeVersion.GitVersion -}}
apiVersion: batch/v1
{{ else -}}
apiVersion: batch/v1beta1
{{ end -}}
kind: CronJob
metadata:
  name: argocd-app-backup-cronjob
  namespace: devtroncd
spec:
  timeZone: {{ .Values.global.timezone | default "UTC" }}
  schedule: "{{ .Values.global.schedule }}"
  jobTemplate:
    spec:
      template:
        {{- if or $.Values.postgres_backup.labels $.Values.postgres_backup.annotations }}
        metadata:
          {{- if $.Values.postgres_backup.labels }}
          labels:
          {{ toYaml .Values.postgres_backup.labels | indent 4 }}
          {{- end }}
          {{- if $.Values.postgres_backup.annotations }}
          annotations:
          {{ toYaml .Values.postgres_backup.annotations | indent 4 }}
          {{- end }}
        {{- end }}
        spec:
          initContainers:
          - name: argocd-app-backup-job
            image: {{ .Values.argocd_backup.argocdImage | default "quay.io/argoproj/argocd:v2.4.0" }}
            volumeMounts:
            - mountPath: /argocd
              name: argocd-volume
            imagePullPolicy: Always
            args:
            - /bin/bash
            - -c
            - {{ .Values.argocd_backup.args | default "argocd admin export -n devtroncd > /argocd/backup.yaml" }}
            resources:
{{ toYaml .Values.argocd_backup.resources | indent 14 }}
          containers:
          - name: aws-cli-for-s3-upload
            image: {{ .Values.global.S3.image | default "quay.io/devtron/k8s-utils:ubuntu-aws-cli-multi-arch-1" }}
            volumeMounts:
            - mountPath: /argocd
              name: argocd-volume
            env:
            {{- if eq .Values.global.S3.NODE_ROLE "false" }}
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  name: devtron-s3-backup-secret
                  key: AWS_ACCESS_KEY
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: devtron-s3-backup-secret
                  key: AWS_SECRET_KEY
            {{- end }}
            - name: S3_BUCKET
              valueFrom:
                secretKeyRef:
                  name: devtron-s3-backup-secret
                  key: S3_BUCKET_NAME
            - name: AWS_DEFAULT_REGION
              valueFrom:
                secretKeyRef:
                  name: devtron-s3-backup-secret
                  key: AWS_REGION
            {{- if .Values.global.S3.CA_BUNDLE }}
            - name: CA_BUNDLE
              valueFrom:
                secretKeyRef:
                  name: devtron-s3-backup-secret
                  key: AWS_CA_BUNDLE
            {{- end }}
            imagePullPolicy: Always
            resources:
{{ toYaml .Values.argocd_backup.resources | indent 14 }}
            args:
            - /bin/bash
            - -c
            - | 
{{ include "devtron.argocdBackup" . | indent 4 }}
          volumes:
          - name: argocd-volume
            emptyDir: {}
          {{- if $.Values.global.nodeSelector }}
          nodeselector: 
{{ toYaml .Values.global.nodeSelector | indent 12 }}
          {{- end }}
          {{- if $.Values.global.tolerations }}
          tolerations:
{{ toYaml .Values.global.tolerations | indent 12 }}
          {{- end }}
          restartPolicy: OnFailure
          serviceAccountName: {{ .Values.argocd_backup.serviceAccountName }}
{{- end }}
{{- end }}