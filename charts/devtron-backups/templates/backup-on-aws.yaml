{{- if .Values.global.AWS.enabled }}
{{- if .Values.postgres_backup.enabled }}
{{ if semverCompare ">=1.21-0" .Capabilities.KubeVersion.GitVersion -}}
apiVersion: batch/v1
{{ else -}}
apiVersion: batch/v1beta1
{{ end -}}
kind: CronJob
metadata:
  name: postgres-app-backup-cronjob
  namespace: devtroncd
spec:
  schedule: {{ .Values.global.schedule }}
  jobTemplate:
    spec:
      template:
        spec:
          initContainers:
          - name: postgres-app-backup-cronjob
            image: postgres:{{ .Values.postgres_backup.postgresImageTag }}
            volumeMounts:
            - mountPath: /tmp
              name: psql-volume
            env:
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  key: PG_PASSWORD
                  name: {{ .Values.postgres_backup.secretName }}
            imagePullPolicy: Always
            args:
            - /bin/bash
            - -c
            - pg_dumpall -h {{ .Values.postgres_backup.host }} --exclude-database=clairv4 -p 5432 -U postgres --no-privileges > /tmp/backup.tar;
          containers:
          - name: aws-cli-for-s3-download
            image: {{ .Values.global.AWS.image }}
            volumeMounts:
            - mountPath: /tmp
              name: psql-volume
            env:
            {{- with .Values.global.AWS }}
            - name: S3_BUCKET
              value: "s3://{{ .S3_BUCKET_NAME }}"
            - name: AWS_ACCESS_KEY_ID
              value: {{ .AWS_ACCESS_KEY }}
            - name: AWS_SECRET_ACCESS_KEY
              value: {{ .AWS_SECRET_KEY }}
            - name: AWS_DEFAULT_REGION
              value: {{ .AWS_REGION }}
            {{- end }}
            imagePullPolicy: Always
            args:
            - /bin/bash
            - -c
          {{- if $.Values.global.AWS.encryption.enabled }}          
            - date1=$(date +%Y%m%d-%H%M); gpg -c --batch --passphrase {{ .Values.global.AWS.encryption.passphrase }} /tmp/backup.tar; rm -rvf /tmp/backup.tar; mv /tmp/backup.tar.gpg /tmp/backup-$date1.tar.gpg; aws s3 cp /tmp/backup-$date1.tar.gpg $S3_BUCKET/postgres/;
          {{- else}}
            - date1=$(date +%Y%m%d-%H%M); mv /tmp/backup.tar /tmp/backup-$date1.tar; aws s3 cp /tmp/backup-$date1.tar $S3_BUCKET/postgres/;
          {{- end }}
          volumes:
          - name: psql-volume
            emptyDir: {}
          restartPolicy: OnFailure
{{- end }}
---
{{- if .Values.argocd_backup.enabled }}
{{ if semverCompare ">=1.21-0" .Capabilities.KubeVersion.GitVersion -}}
apiVersion: batch/v1
{{ else -}}
apiVersion: batch/v1beta1
{{ end -}}
kind: CronJob
metadata:
    name: argocd-app-backup-cronjob
    namespace: devtroncd
spec:
  schedule: {{ .Values.global.schedule }}
  jobTemplate:
    spec:
      template:
        spec:
          initContainers:
          - name: argocd-app-backup-job
            {{- if eq .Values.argocdversion "v2"}}
            image: quay.io/argoproj/argocd:v2.4.0
            {{- end }}
            {{- if eq .Values.argocdversion "v1"}}
            image: argoproj/argocd:v1.8.1
            {{- end }}
            volumeMounts:
            - mountPath: /cache
              name: argocd-volume
            env:
            imagePullPolicy: Always
            args:
            - /bin/bash
            - -c
            {{- if eq .Values.argocdversion "v2"}}
            - argocd admin export -n devtroncd > /cache/backup.yaml
            {{- end }}
            {{- if eq .Values.argocdversion "v1"}}
            - argocd-util export --namespace devtroncd > /cache/backup.yaml;
            {{- end }}
          containers:
          - name: aws-cli-for-s3-upload
            image: {{ .Values.global.AWS.image}}
            volumeMounts:
            - mountPath: /cache
              name: argocd-volume
            env:
            {{- with .Values.global.AWS }}
            - name: S3_BUCKET
              value: "s3://{{ .S3_BUCKET_NAME }}"
            - name: AWS_ACCESS_KEY_ID
              value: {{ .AWS_ACCESS_KEY }}
            - name: AWS_SECRET_ACCESS_KEY
              value: {{ .AWS_SECRET_KEY }}
            - name: AWS_DEFAULT_REGION
              value: {{ .AWS_REGION }}
            {{- end }}
            imagePullPolicy: Always
            args:
            - /bin/bash
            - -c
          {{- if $.Values.global.AWS.encryption.enabled }}
            - date1=$(date +%Y%m%d-%H%M); gpg -c --batch --passphrase {{ .Values.global.AWS.encryption.passphrase }} /cache/backup.yaml; rm -rvf /cache/backup.yaml; mv /cache/backup.yaml.gpg /cache/backup-$date1.yaml.gpg; aws s3 cp /cache/backup-$date1.yaml.gpg $S3_BUCKET/argocd/;
          {{- else}}
            - date1=$(date +%Y%m%d-%H%M); mv /cache/backup.yaml /cache/backup-$date1.yaml; aws s3 cp /cache/backup-$date1.yaml $S3_BUCKET/argocd/;
          {{- end }}
          volumes:
          - name: argocd-volume
            emptyDir: {}
          restartPolicy: OnFailure
          serviceAccountName: {{ .Values.argocd_backup.serviceAccountName }}
{{- end }}
{{- end }}