name: "example-k3s-cluster" # Name for the Helm release
k3s_version: "v1.27.7+k3s1" # Specify desired K3s version (check releases on GitHub)

# Node configuration (assuming Terraform provisions VMs on a cloud provider)
# These are generic; the actual TF module would need provider-specific inputs (AWS, Azure, GCP, DigitalOcean etc.)
server_node_count: 1
# server_instance_type: "t3.medium" # e.g., for AWS
# server_image_id: "ami-xxxxxxxxxxxxx" # e.g., for AWS
agent_node_count: 0
# agent_instance_type: "t3.medium" # e.g., for AWS
# agent_image_id: "ami-xxxxxxxxxxxxx" # e.g., for AWS

# Common infrastructure settings (examples, would vary by TF module and provider)
# ssh_user: "ubuntu"
# ssh_private_key_pem: | # Or path to key. Store sensitive data securely.
#   -----BEGIN OPENSSH PRIVATE KEY-----
#   ...
#   -----END OPENSSH PRIVATE KEY-----
# vpc_id: "vpc-xxxxxxxx"
# subnet_ids: ["subnet-xxxxxxxx"]

# K3s specific installation options
k3s_server_install_flags: "" # e.g., "--disable traefik --tls-san your.server.ip --tls-san your.server.dns"
k3s_agent_install_flags: ""  # e.g., "--node-label role=agent"
# k3s_token: "YOUR_K3S_TOKEN" # Can be generated by TF or provided. If not set, TF module might auto-generate.
# datastore_endpoint: "" # For external datastore like etcd or RDS

# Example tags (for underlying VMs/resources)
resource_tags:
  team: "Devops_Team"
  environment: "non-production"
  project: "k3s-project"

# Terraform controller specific values
path: "./terraform/k3s-auto-mode" # This path is an assumption
approvePlan: "auto"
destroyResourcesOnDeletion: false
alwaysCleanupRunnerPod: false
force: false

# Runner pod specific (can remain common or be adapted)
# affinity: {}
# tolerations: []
