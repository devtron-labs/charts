{{- if .Values.podSecurityPolicy.enabled }}
apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingAdmissionPolicy
metadata:
  name: "{{ include "k8s-shield.fullname" . }}-pod-security"
spec:
  failurePolicy: Fail
  matchConstraints:
    resourceRules:
    - apiGroups:
      {{- range $.Values.resourcePolicies.WithoutResource.apiGroups }}
      - {{ . | quote }}
      {{- end }}
      apiVersions:
        - v1
      operations:
      {{- range $.Values.resourcePolicies.WithoutResource.operations }}
      - {{ . | quote }}
      {{- end }}
      resources:
      {{- range $.Values.resourcePolicies.WithoutResource.resources }}
      - {{ . | quote }}
      {{- end }}
      scope: '*'
  validations:
    - expression: "object.kind != 'Pod' || object.spec.containers.all(c, has(c.securityContext) && has(c.securityContext.runAsNonRoot) && c.securityContext.runAsNonRoot == {{ .Values.podSecurityPolicy.allowrunAsNonRoot }})"
      message: "All containers must set runAsNonRoot to {{ .Values.podSecurityPolicy.allowrunAsNonRoot }}"
    - expression: "object.kind != 'Pod' || object.spec.containers.all(c, has(c.securityContext) && has(c.securityContext.readOnlyRootFilesystem) && c.securityContext.readOnlyRootFilesystem == {{ .Values.podSecurityPolicy.allowreadOnlyRootFilesystem }})"
      message: "All containers must set readOnlyRootFilesystem to {{ .Values.podSecurityPolicy.allowreadOnlyRootFilesystem }}"
    - expression: "object.kind != 'Pod' || object.spec.containers.all(c, !has(c.securityContext) || !has(c.securityContext.allowPrivilegeEscalation) || c.securityContext.allowPrivilegeEscalation == {{ .Values.podSecurityPolicy.allowPrivilegeEscalation }})"
      message: "All containers must set allowPrivilegeEscalation to {{ .Values.podSecurityPolicy.allowPrivilegeEscalation }}"
    - expression: "object.kind != 'Pod' || object.spec.containers.all(c, !has(c.securityContext) || !has(c.securityContext.privileged) || c.securityContext.privileged == {{ .Values.podSecurityPolicy.allowprivileged }})"
      message: "All containers must set privileged to {{ .Values.podSecurityPolicy.allowprivileged }}"
    - expression: "['Deployment', 'ReplicaSet', 'DaemonSet', 'StatefulSet', 'Job'].all(kind, object.kind != kind) || object.spec.template.spec.containers.all(c, has(c.securityContext) && has(c.securityContext.runAsNonRoot) && c.securityContext.runAsNonRoot == {{ .Values.podSecurityPolicy.allowrunAsNonRoot }})"
      message: "All workload containers must set runAsNonRoot to {{ .Values.podSecurityPolicy.allowrunAsNonRoot }}"
    - expression: "['Deployment', 'ReplicaSet', 'DaemonSet', 'StatefulSet', 'Job'].all(kind, object.kind != kind) || object.spec.template.spec.containers.all(c, has(c.securityContext) && has(c.securityContext.readOnlyRootFilesystem) && c.securityContext.readOnlyRootFilesystem == {{ .Values.podSecurityPolicy.allowreadOnlyRootFilesystem }})"
      message: "All workload containers must set readOnlyRootFilesystem to {{ .Values.podSecurityPolicy.allowreadOnlyRootFilesystem }}"
    - expression: "['Deployment', 'ReplicaSet', 'DaemonSet', 'StatefulSet', 'Job'].all(kind, object.kind != kind) || object.spec.template.spec.containers.all(c, !has(c.securityContext) || !has(c.securityContext.allowPrivilegeEscalation) || c.securityContext.allowPrivilegeEscalation == {{ .Values.podSecurityPolicy.allowPrivilegeEscalation }})"
      message: "All workload containers must set allowPrivilegeEscalation to {{ .Values.podSecurityPolicy.allowPrivilegeEscalation }}"
    - expression: "['Deployment', 'ReplicaSet', 'DaemonSet', 'StatefulSet', 'Job'].all(kind, object.kind != kind) || object.spec.template.spec.containers.all(c, !has(c.securityContext) || !has(c.securityContext.privileged) || c.securityContext.privileged == {{ .Values.podSecurityPolicy.allowprivileged }})"
      message: "All workload containers must set privileged to {{ .Values.podSecurityPolicy.allowprivileged }}"
    - expression: "object.kind != 'CronJob' || object.spec.jobTemplate.spec.template.spec.containers.all(c, has(c.securityContext) && has(c.securityContext.runAsNonRoot) && c.securityContext.runAsNonRoot == {{ .Values.podSecurityPolicy.allowrunAsNonRoot }})"
      message: "All CronJob containers must set runAsNonRoot to {{ .Values.podSecurityPolicy.allowrunAsNonRoot }}"
    - expression: "object.kind != 'CronJob' || object.spec.jobTemplate.spec.template.spec.containers.all(c, has(c.securityContext) && has(c.securityContext.readOnlyRootFilesystem) && c.securityContext.readOnlyRootFilesystem == {{ .Values.podSecurityPolicy.allowreadOnlyRootFilesystem }})"
      message: "All CronJob containers must set readOnlyRootFilesystem to {{ .Values.podSecurityPolicy.allowreadOnlyRootFilesystem }}"
    - expression: "object.kind != 'CronJob' || object.spec.jobTemplate.spec.template.spec.containers.all(c, !has(c.securityContext) || !has(c.securityContext.allowPrivilegeEscalation) || c.securityContext.allowPrivilegeEscalation == {{ .Values.podSecurityPolicy.allowPrivilegeEscalation }})"
      message: "All CronJob containers must set allowPrivilegeEscalation to {{ .Values.podSecurityPolicy.allowPrivilegeEscalation }}"
    - expression: "object.kind != 'CronJob' || object.spec.jobTemplate.spec.template.spec.containers.all(c, !has(c.securityContext) || !has(c.securityContext.privileged) || c.securityContext.privileged == {{ .Values.podSecurityPolicy.allowprivileged }})"
      message: "All CronJob containers must set privileged to {{ .Values.podSecurityPolicy.allowprivileged }}"
---
apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingAdmissionPolicyBinding
metadata:
  name: {{ include "k8s-shield.fullname" . }}-pod-security-binding
spec:
  policyName: {{ include "k8s-shield.fullname" . }}-pod-security
  validationActions:
  {{- range .Values.podSecurityPolicy.validationActions }}
  - {{ . }}
  {{- end }}
{{- end }}
