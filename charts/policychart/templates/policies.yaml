{{- if $.Values.pvcCreationPolicy.enabled }}
apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingAdmissionPolicy
metadata:
  name: {{ include "policychart.fullname" . }}-deny-pv-pvc-creation
spec:
  failurePolicy: Fail
  matchConstraints:
    matchPolicy: Equivalent
    namespaceSelector: 
      matchExpressions:
        - key: kubernetes.io/metadata.name
          operator: In
          values:
          {{- range .Values.pvcCreationPolicy.namespaces }}
          - {{ . | quote }}
          {{- end }}
    objectSelector: {}
    resourceRules:
    - apiGroups:
      - ""
      apiVersions:
      - v1
      operations:
      - CREATE
      resources:
      - persistentvolumeclaims
      scope: Namespaced
  validations:
  - expression: "false"
    message: Creation of PersistentVolumeClaims is not allowed.
{{- end }}
{{- if $.Values.namespaceDeletionPolicy.enabled }}
---
apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingAdmissionPolicy
metadata:
  name: {{ include "policychart.fullname" . }}-deny-namespace-deletion
spec:
  failurePolicy: Fail
  matchConstraints:
    matchPolicy: Equivalent
    namespaceSelector: {}
    objectSelector: {}
    resourceRules:
      - apiGroups:
          - ""
        apiVersions:
          - v1
        operations:
          - DELETE
        resourceNames:
          - devtroncd
          - argocd
        resources:
          - namespaces
        scope: "*"
  validations:
    - expression: "false"
      message: Deletion of namespace is not allowed.
{{- end }}
{{- if $.Values.loadBalancerPolicy.enabled }}
---
apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingAdmissionPolicy
metadata:
  name: {{ include "policychart.fullname" . }}-deny-loadbalancer-services
spec:
  failurePolicy: Fail
  matchConstraints:
    matchPolicy: Equivalent
    namespaceSelector:
      matchExpressions:
        - key: kubernetes.io/metadata.name
          operator: In
          values:
          {{- range .Values.loadBalancerPolicy.namespaces }}
          - {{ . | quote }}
          {{- end }}
    objectSelector: {}
    resourceRules:
    - apiGroups:
      - ""
      apiVersions:
      - v1
      operations:
      - CREATE
      resources:
      - services
      scope: Namespaced
  validations:
  - expression: object.spec.type != 'LoadBalancer'
    message: Creation of Services with type LoadBalancer is not allowed.
{{- end }}
{{- if $.Values.roleCreationPolicy.enabled }}
---
apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingAdmissionPolicy
metadata:
  name: {{ include "policychart.fullname" . }}-deny-role-creation
spec:
  failurePolicy: Fail
  matchConstraints:
    matchPolicy: Equivalent
    namespaceSelector: {}
    objectSelector: {}
    resourceRules:
    - apiGroups:
      - rbac.authorization.k8s.io
      apiVersions:
      - v1
      operations:
      - CREATE
      resources:
      - clusterroles
      - roles
      scope: '*'
  validations:
  - expression: "false"
    message: Creation of ClusterRole and Role is not allowed.
{{- end }}
{{- if $.Values.podSecurityPolicy.enabled }}
---
apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingAdmissionPolicy
metadata:
  name: {{ include "policychart.fullname" . }}-pod-security-policy
spec:
  failurePolicy: Fail
  matchConstraints:
    matchPolicy: Equivalent
    namespaceSelector: {}
    objectSelector: {}
    resourceRules:
    - apiGroups:
      - apps
      apiVersions:
      - v1
      operations:
      - CREATE
      - UPDATE
      resources:
      - deployments
      scope: '*'
  validations:
  - expression: object.spec.template.spec.containers.all(c, has(c.securityContext)
      && has(c.securityContext.runAsNonRoot) && c.securityContext.runAsNonRoot)
    message: all containers must set runAsNonRoot to true
  - expression: object.spec.template.spec.containers.all(c, has(c.securityContext)
      && has(c.securityContext.readOnlyRootFilesystem) && c.securityContext.readOnlyRootFilesystem)
    message: all containers must set readOnlyRootFilesystem to true
  - expression: object.spec.template.spec.containers.all(c, !has(c.securityContext)
      || !has(c.securityContext.allowPrivilegeEscalation) || !c.securityContext.allowPrivilegeEscalation)
    message: all containers must NOT set allowPrivilegeEscalation to true
  - expression: object.spec.template.spec.containers.all(c, !has(c.securityContext)
      || !has(c.securityContext.privileged) || !c.securityContext.privileged)
    message: all containers must NOT set privileged to true
{{- end }}
{{- if $.Values.appDeletionPolicy.enabled }}
---
apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingAdmissionPolicy
metadata:
  name: {{ include "policychart.fullname" . }}-prevent-app-deletion
spec:
  failurePolicy: Fail
  matchConstraints:
    matchPolicy: Equivalent
    namespaceSelector:
      matchExpressions:
        - key: kubernetes.io/metadata.name
          operator: In
          values:
          {{- range .Values.appDeletionPolicy.namespaces }}
          - {{ . | quote }}
          {{- end }}
    objectSelector: {}
    resourceRules:
    - apiGroups:
      - argoproj.io
      apiVersions:
      - v1alpha1
      operations:
      - DELETE
      resources:
      - applications
      scope: Namespaced
  validations:
  - expression: "false"
    message: Deletion of application is not allowed.
{{- end }}
{{- if $.Values.withoutResourcesPolicy.enabled }}
---
apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingAdmissionPolicy
metadata:
  name: {{ include "policychart.fullname" . }}-require-pod-resources
spec:
  failurePolicy: Fail
  matchConstraints:
    matchPolicy: Equivalent
    namespaceSelector:
      matchExpressions:
        - key: kubernetes.io/metadata.name
          operator: In
          values:
          {{- range .Values.withoutResourcesPolicy.namespaces }}
          - {{ . | quote }}
          {{- end }}
    resourceRules:
    - apiGroups:
      - ""
      apiVersions:
      - v1
      operations:
      - CREATE
      - UPDATE
      resources:
      - pods
      scope: Namespaced
  validations:
    - expression: "object.spec.containers.all(c, has(c.resources) && has(c.resources.requests) && has(c.resources.limits) && has(c.resources.requests.cpu) && has(c.resources.requests.memory) && has(c.resources.limits.cpu) && has(c.resources.limits.memory))"
      message: "All containers in the pod must have both CPU and memory requests and limits specified."
{{- end }}
{{- if  $.Values.withoutResourcesPolicy.policies.restrictResourceLimitsresourcesPolicy.enabled }}
---
apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingAdmissionPolicy
metadata:
  name: {{ include "policychart.fullname" . }}-restrict-resource-limits
spec:
  failurePolicy: Fail
  matchConstraints:
    matchPolicy: Equivalent
    namespaceSelector:
      matchExpressions:
        - key: kubernetes.io/metadata.name
          operator: In
          values:
          {{- range .Values.withoutResourcesPolicy.policies.restrictResourceLimitsresourcesPolicy.namespaces }}
          - {{ . | quote }}
          {{- end }}
    objectSelector: {}
    resourceRules:
      - apiGroups:
          - apps
        apiVersions:
          - v1
        operations:
          - CREATE
          - UPDATE
        resources:
          - deployments
          - statefulsets
        scope: Namespaced
  validations:
    - expression: |-
        !has(object.spec.template.spec.containers[0].resources.limits) || (
          (!has(object.spec.template.spec.containers[0].resources.limits.cpu) ||
           quantity(object.spec.template.spec.containers[0].resources.limits.cpu).compareTo(quantity('1000m')) <= 0) &&
          (!has(object.spec.template.spec.containers[0].resources.limits.memory) ||
          quantity(object.spec.template.spec.containers[0].resources.limits.memory).compareTo(quantity('2Gi')) <= 0)
        )
      message: "Resource limits exceed the maximum allowed. CPU must be <= 1 and memory must be <= 2Gi."
{{- end }}
{{- if $.Values.labelPolicy.enabled }}
---
apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingAdmissionPolicy
metadata:
  name: {{ include "policychart.fullname" . }}-require-labels
spec:
  failurePolicy: Fail
  matchConstraints:
    matchPolicy: Equivalent
    namespaceSelector:
      matchExpressions:
        - key: kubernetes.io/metadata.name
          operator: In
          values:
          {{- range .Values.labelPolicy.labels }}
          - {{ . | quote }}
          {{- end }}
    objectSelector: {}
    resourceRules:
      - apiGroups:
          - apps
        apiVersions:
          - v1
        operations:
          - CREATE
          - UPDATE
        resources:
          - deployments
          - statefulsets
        scope: Namespaced
  validations:
    - expression: object.metadata.labels !=null  && size(object.metadata.labels) > 0
      message: "At least one label is required for all Deployments and StatefulSets."
{{- end }}

