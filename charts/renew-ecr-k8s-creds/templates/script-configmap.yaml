apiVersion: v1
kind: ConfigMap
metadata:
  name: renew-ecr-k8s-creds-script
  namespace: {{ .Values.kubernetes.namespace }}
data:
  update-secret.sh: |
    #!/bin/bash

    # Install kubectl
    echo "Installing kubectl..."
    curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
    install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl

    # Install jq
    echo "Installing jq..."
    yum install -y jq

    secret_exists() {
      kubectl get secret "{{ .Values.kubernetes.secretName }}" --namespace="{{ .Values.kubernetes.namespace }}" &> /dev/null
      return $?
    }

    echo "Aws Configure..."
    aws configure set aws_access_key_id "{{ .Values.aws.accessKey }}"
    aws configure set aws_secret_access_key "{{ .Values.aws.secretKey }}"
    aws configure set region "{{ .Values.aws.region }}"
    aws configure set output "json"

    echo "Assuming a Role..."
    ROLE_OUTPUT=$(aws sts assume-role --role-arn "{{ .Values.aws.roleArn }}" --role-session-name "{{ .Values.aws.sessionName }}")

    echo "Now fetching the access_key, secret_key & session_token..."
    AWS_ACCESS_KEY_ID=$(echo "$ROLE_OUTPUT" | jq -r '.Credentials.AccessKeyId')
    AWS_SECRET_ACCESS_KEY=$(echo "$ROLE_OUTPUT" | jq -r '.Credentials.SecretAccessKey')
    AWS_SESSION_TOKEN=$(echo "$ROLE_OUTPUT" | jq -r '.Credentials.SessionToken')

    export AWS_ACCESS_KEY_ID
    export AWS_SECRET_ACCESS_KEY
    export AWS_SESSION_TOKEN

    if secret_exists; then
      echo "Secret already exists, patching the secret..."
      kubectl patch secret "{{ .Values.kubernetes.secretName }}" --namespace="{{ .Values.kubernetes.namespace }}" --type='json' -p='[{"op": "replace", "path": "/data/.dockerconfigjson", "value":"'$(echo -n "{\"auths\":{\"{{ .Values.ecr.account }}.dkr.ecr.{{ .Values.ecr.region }}.amazonaws.com\":{\"username\":\"AWS\",\"password\":\"$(aws ecr get-login-password)\"}}}" | base64 | tr -d '\n')'"}]'
    else
      echo "Secret does not exist, creating the secret..."
      kubectl create secret docker-registry "{{ .Values.kubernetes.secretName }}" \
        --docker-server="{{ .Values.ecr.account }}.dkr.ecr.{{ .Values.ecr.region }}.amazonaws.com" \
        --docker-username=AWS \
        --docker-password="$(aws ecr get-login-password)" \
        --namespace="{{ .Values.kubernetes.namespace }}"
    fi

    unset AWS_ACCESS_KEY_ID
    unset AWS_SECRET_ACCESS_KEY
    unset AWS_SESSION_TOKEN
