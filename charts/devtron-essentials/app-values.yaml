argo-cd:
  enabled: false
  customSelectorLabels: {}
    # devtron.ai/custom-labels : argo-cd
  crds:
    install: true  #if you are upgrading make it as false 
    keep: true

  applicationSet:
    enabled: false
  configs:
    cm:
      accounts.devtron: apiKey,login
      create: true
      resource.ignoreResourceUpdatesEnabled: "false"
      resource.compareoptions: |
        ignoreAggregatedRoles: true
      repositories: |-
        - name: devtron
          type: helm
          url: https://helm.devtron.ai
        - name: fluent
          type: helm
          url: https://fluent.github.io/helm-charts
        - name: nginx-ingress
          type: helm
          url: https://kubernetes.github.io/ingress-nginx
        - name: elastic
          type: helm
          url: https://helm.elastic.co
        - name: bitnami
          type: helm
          url: https://charts.bitnami.com/bitnami
        - name: prometheus-community
          type: helm
          url:  https://prometheus-community.github.io/helm-charts
        - name: jetstack
          type: helm
          url:  https://charts.jetstack.io
        - name: metrics-server
          type: helm
          url:  https://kubernetes-sigs.github.io/metrics-server
        - name: autoscaler
          type: helm
          url:  https://kubernetes.github.io/autoscaler
        - name: external-secrets
          type: helm
          url:  https://charts.external-secrets.io
        - name: kedacore
          type: helm
          url:  https://kedacore.github.io/charts
      resource.customizations: |
        kubernetes-client.io/ExternalSecret:
          health.lua: |
            hs = {}
            if obj.status ~= nil then
              if obj.status.status ~= nil then
                  hs.status = "Degraded"
                  hs.message = obj.status.status
              else
                hs.status = "Healthy"
              end
            else
              hs.status = "Healthy"
            end
            return hs
        argoproj.io/Rollout:
          health.lua: |
            function checkReplicasStatus(obj)
              hs = {}
              replicasCount = getNumberValueOrDefault(obj.spec.replicas)
              replicasStatus = getNumberValueOrDefault(obj.status.replicas)
              updatedReplicas = getNumberValueOrDefault(obj.status.updatedReplicas)
              availableReplicas = getNumberValueOrDefault(obj.status.availableReplicas)

              if updatedReplicas < replicasCount then
                hs.status = "Progressing"
                hs.message = "Waiting for roll out to finish: More replicas need to be updated"
                return hs
              end
              -- Since the scale down delay can be very high, BlueGreen does not wait for all the old replicas to scale
              -- down before marking itself healthy. As a result, only evaluate this condition if the strategy is canary.
              if obj.spec.strategy.canary ~= nil and replicasStatus > updatedReplicas then
                hs.status = "Progressing"
                hs.message = "Waiting for roll out to finish: old replicas are pending termination"
                return hs
              end
              if availableReplicas < updatedReplicas then
                hs.status = "Progressing"
                hs.message = "Waiting for roll out to finish: updated replicas are still becoming available"
                return hs
              end
              return nil
            end

            function getNumberValueOrDefault(field)
              if field ~= nil then
                return field
              end
              return 0
            end

            function checkPaused(obj)
              hs = {}
              local paused = false
              if obj.status.verifyingPreview ~= nil then
                paused = obj.status.verifyingPreview
              elseif obj.spec.paused ~= nil then
                paused = obj.spec.paused
              end

              if paused then
                hs.status = "Suspended"
                hs.message = "Rollout is paused"
                return hs
              end
              return nil
            end

            hs = {}
            if obj.status ~= nil then
              if obj.status.conditions ~= nil then
                for _, condition in ipairs(obj.status.conditions) do
                  if condition.type == "InvalidSpec" then
                    hs.status = "Degraded"
                    hs.message = condition.message
                    return hs
                  end
                  if condition.type == "Progressing" and condition.reason == "RolloutAborted" then
                    hs.status = "Degraded"
                    hs.message = condition.message
                    return hs
                  end
                  if condition.type == "Progressing" and condition.reason == "ProgressDeadlineExceeded" then
                    hs.status = "Degraded"
                    hs.message = condition.message
                    return hs
                  end
                end
              end
              if obj.status.currentPodHash ~= nil then
                if obj.spec.strategy.blueGreen ~= nil then
                  isPaused = checkPaused(obj)
                  if isPaused ~= nil then
                    return isPaused
                  end
                  replicasHS = checkReplicasStatus(obj)
                  if replicasHS ~= nil then
                    return replicasHS
                  end
                  if obj.status.blueGreen ~= nil and obj.status.blueGreen.activeSelector ~= nil and obj.status.blueGreen.activeSelector == obj.status.currentPodHash then
                    hs.status = "Healthy"
                    hs.message = "The active Service is serving traffic to the current pod spec"
                    return hs
                  end
                  hs.status = "Progressing"
                  hs.message = "The current pod spec is not receiving traffic from the active service"
                  return hs
                end
                if obj.spec.strategy.recreate ~= nil then
                  isPaused = checkPaused(obj)
                  if isPaused ~= nil then
                    return isPaused
                  end
                  replicasHS = checkReplicasStatus(obj)
                  if replicasHS ~= nil then
                    return replicasHS
                  end
                  if obj.status.recreate ~= nil and obj.status.recreate.currentRS ~= nil and obj.status.recreate.currentRS == obj.status.currentPodHash then
                    hs.status = "Healthy"
                    hs.message = "Rollout is successful"
                    return hs
                  end
                  hs.status = "Progressing"
                  hs.message = "Rollout is in progress"
                  return hs
                end
                if obj.spec.strategy.canary ~= nil then
                  currentRSIsStable = obj.status.canary.stableRS == obj.status.currentPodHash
                  if obj.spec.strategy.canary.steps ~= nil and table.getn(obj.spec.strategy.canary.steps) > 0 then
                    stepCount = table.getn(obj.spec.strategy.canary.steps)
                    if obj.status.currentStepIndex ~= nil then
                      currentStepIndex = obj.status.currentStepIndex
                      isPaused = checkPaused(obj)
                      if isPaused ~= nil then
                        return isPaused
                      end
                  
                      if paused then
                        hs.status = "Suspended"
                        hs.message = "Rollout is paused"
                        return hs
                      end
                      if currentRSIsStable and stepCount == currentStepIndex then
                        replicasHS = checkReplicasStatus(obj)
                        if replicasHS ~= nil then
                          return replicasHS
                        end
                        hs.status = "Healthy"
                        hs.message = "The rollout has completed all steps"
                        return hs
                      end
                    end
                    hs.status = "Progressing"
                    hs.message = "Waiting for rollout to finish steps"
                    return hs
                  end

                  -- The detecting the health of the Canary deployment when there are no steps
                  replicasHS = checkReplicasStatus(obj)
                  if replicasHS ~= nil then
                    return replicasHS
                  end
                  if currentRSIsStable then
                    hs.status = "Healthy"
                    hs.message = "The rollout has completed canary deployment"
                    return hs
                  end
                  hs.status = "Progressing"
                  hs.message = "Waiting for rollout to finish canary deployment"
                end
              end
            end
            hs.status = "Progressing"
            hs.message = "Waiting for rollout to finish: status has not been reconciled."
            return hs
    rbac:
      policy.default: role:admin
    secret:
      createSecret: true
      extra: {}
  controller:
    replicas: 1
    extraArgs: 
      - --kubectl-parallelism-limit
      - "20"
    resources: {}
    affinity: {}
    metrics:
      enabled: true
      serviceMonitor:
        enabled: true
        interval: 2m
  redis:
    exporter:
      enabled: true
    resources: {}
    affinity: {}
    metrics:
      enabled: true
      serviceMonitor:
        enabled: true
        interval: 2m
  server:
    replicas: 1
    resources: {}
    metrics:
      enabled: true
      serviceMonitor:
        enabled: true
        interval: 2m
  repoServer:
    replicas: 1
    resources: {}
    extraArgs: 
      - --repo-cache-expiration
      - 24h
      - --parallelismlimit
      - "20"
    env: 
      - name: ARGOCD_EXEC_TIMEOUT
        value: 180s
    metrics:
      enabled: true
      serviceMonitor:
        enabled: true
        interval: 2m
  dex:
    enabled: false
  fullnameOverride: argocd
  notifications:
    enabled: false
argo-rollouts:
  fullnameOverride: rollout-controller
  enabled: false
  customSelectorLabels: {}
    # devtron.ai/custom-labels : rollout
argo-workflow:
  enabled: false
  fullnameOverride: argo-workflows
devtron-rollout:
  enabled: false
permissions:
  enabled: false
  imagePullSecret:
    name: ""
    value: ""
postgresql:
  customSelectorLabels: {}
    # devtron.ai/custom-labels : postgres
  customScripts:
    db_create.sql: |
      create database casbin;
      create database git_sensor;
      create database lens;
      create database orchestrator;
  enabled: false
  fullnameOverride: postgresql-postgresql
  image:
    pullPolicy: IfNotPresent
    registry: quay.io/devtron
    repository: postgres
    tag: "14.9"
  nodeSelector: {}
  resources: {}
  settings:
    superuser: "postgres"
    superuserPassword: change-password
    authMethod: md5
    initDbArgs: --auth-local=md5
  storage:
    className: ""
    persistentVolumeClaimName: ""
    requestedSize: 30Gi
  tolerations: []
rawYaml:
  enabled: false
  data: []