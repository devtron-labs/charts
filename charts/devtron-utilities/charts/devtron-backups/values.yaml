global:
  # Twice a day
  schedule: "0 */12 * * *"
  # devtron-backups
  S3:
    # give the endpoint in case of non AWS storages with s3 protocol 
    enabled: false
    S3_BUCKET_NAME: ""
    S3_ACCESS_KEY: ""
    S3_SECRET_KEY: ""
    AWS_REGION: ""
    S3_ENDPOINT: ""
    CA_BUNDLE: ""
    # CA_BUNDLE: "-----BEGIN CERTIFICATE-----\nMIIDcDfghjklcvbnm,tryupE+mz30g=\n-----END CERTIFICATE-----"
    # set true if node has access of buckets
    #defaults to true, set false and specify S3_ACCESS_KEY & S3_SECRET_KEY if node does not have bucket access
    NODE_ROLE: "true"
    # passphrase used to encrypt/decrypt the file (encryption is done by gpg)
    encryption:
      enabled: false
      passphrase: ""
    # image: quay.io/devtron/k8s-utils:ubuntu-aws-cli #default amd  
    # image: quay.io/devtron/k8s-utils:0b9f5ba5-395-11405 #arm
  AZURE:
    enabled: false
    AZURE_BLOB_ACCOUNT_NAME: ""
    AZURE_ACCOUNT_KEY: ""
    AZURE_BLOB_CONTAINER_FOR_POSTGRES: ""
    AZURE_BLOB_CONTAINER_FOR_ARGOCD: ""
    encryption:
      enabled: false # Recommended
      passphrase: ""  # Required if encryption is enabled

    # image: quay.io/devtron/k8s-utils:az-cli-ubuntu #amd
  GCP:
    enabled: false
    GCS_BUCKET_NAME: "" # Required if GCP is enabled
    CREDENTIALS: # Optional. Use only if in case node doesn't have permission to push over GCS.
      enabled: false
      # Only base64 Encoded JSON CREDENTIALS allowed. Example shown below.
      # GCP_CREDENTIALS_JSON: "eyJ0eXBlIjogInNlcnZpY2VfYWNjb3VudCIsInByb2plY3RfaWQiOiAiPHlvdXItcHJvamVjdC1pZD4iLCJwcml2YXRlX2tleV9pZCI6ICI8eW91ci1wcml2YXRlLWtleS1pZD4iLCJwcml2YXRlX2tleSI6ICI8eW91ci1wcml2YXRlLWtleT4iLCJjbGllbnRfZW1haWwiOiAiPHlvdXItY2xpZW50LWVtYWlsPiIsImNsaWVudF9pZCI6ICI8eW91ci1jbGllbnQtaWQ+IiwiYXV0aF91cmkiOiAiaHR0cHM6Ly9hY2NvdW50cy5nb29nbGUuY29tL28vb2F1dGgyL2F1dGgiLCJ0b2tlbl91cmkiOiAiaHR0cHM6Ly9vYXV0aDIuZ29vZ2xlYXBpcy5jb20vdG9rZW4iLCJhdXRoX3Byb3ZpZGVyX3g1MDlfY2VydF91cmwiOiAiaHR0cHM6Ly93d3cuZ29vZ2xlYXBpcy5jb20vb2F1dGgyL3YxL2NlcnRzIiwiY2xpZW50X3g1MDlfY2VydF91cmwiOiAiPHlvdXItY2xpZW50LWNlcnQtdXJsPiJ9Cg=="  
      GCP_CREDENTIALS_JSON: ""

    encryption:
      enabled: false # Recommended
      passphrase: "" # Required if encryption is enabled
    # image: google/cloud-sdk:alpine # default amd

  PERSISTENCE:
    enabled: false
    existingClaim: ""
    # size: 30Gi   # Required if existingClaim is not used
    storageClass: "" # Required if existingClaim is not used
    encryption:
      enabled: false # Recommended
      passphrase: "" # Required if encryption is enabled
  
  # Taints and tolerations for both backups
  tolerations: []
    # - key: "example-key"
    #   operator: "Equal"
    #   value: "example-value"
    #   effect: "NoSchedule"
  nodeSelector: {}
      # kubernetes.io/hostname: "worker-node-1"

  timezone: ""  #Set the timezone for scheduling the cronJob. # default UTC

argocdversion: v2

postgres_backup:
  # Reference to secret which as postgresql password in PG_PASSWORD key
  secretName: "devtron-secret"
  enabled: true
  resources:
    requests:
      cpu: 100m
      memory: 100Mi
    limits:
      cpu: 100m
      memory: 100Mi
  labels: {}
    # key: "example-value"
  annotations: {}
    # key: "example-value"

  # postgresImage: postgres:14
  # host: "postgresql-custom.devtroncd"

argocd_backup:
  serviceAccountName: "argocd-backup"
  enabled: false
  resources:
    requests:
      cpu: 100m
      memory: 100Mi
    limits:
      cpu: 100m
      memory: 100Mi
  labels: {}
    # key: "example-value"
  annotations: {}
    # key: "example-value"

  # argocdImage: quay.io/argoproj/argocd:v2.4.0
  # args: "argocd admin export -n devtroncd > /argocd/backup.yaml"

  # argocdImage: argoproj/argocd:v1.8.1  #(image for argo-V1)
  # args: argocd-util export --namespace devtroncd > /argocd/backup.yaml; #(argo-V1)

