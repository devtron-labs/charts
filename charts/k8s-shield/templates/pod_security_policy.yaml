{{- if .Values.podSecurityPolicy.enabled }}
apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingAdmissionPolicy
metadata:
  name: "{{ include "policychart.fullname" . }}-pod-security-policy"
spec:
  failurePolicy: Fail
  matchConstraints:
    resourceRules:
    - apiGroups:
        - ""
        - apps
        - batch
      apiVersions:
        - v1
      operations:
        - CREATE
        - UPDATE
      resources:
        - pods
        - deployments
        - replicasets
        - daemonsets
        - statefulsets
        - jobs
        - cronjobs
      scope: '*'
  validations:
    - expression: "object.kind != 'Pod' || object.spec.containers.all(c, has(c.securityContext) && has(c.securityContext.runAsNonRoot) && c.securityContext.runAsNonRoot == {{ .Values.podSecurityPolicy.runAsNonRoot }})"
      message: "All containers must set runAsNonRoot to {{ .Values.podSecurityPolicy.runAsNonRoot }}"
    - expression: "object.kind != 'Pod' || object.spec.containers.all(c, has(c.securityContext) && has(c.securityContext.readOnlyRootFilesystem) && c.securityContext.readOnlyRootFilesystem == {{ .Values.podSecurityPolicy.readOnlyRootFilesystem }})"
      message: "All containers must set readOnlyRootFilesystem to {{ .Values.podSecurityPolicy.readOnlyRootFilesystem }}"
    - expression: "object.kind != 'Pod' || object.spec.containers.all(c, !has(c.securityContext) || !has(c.securityContext.allowPrivilegeEscalation) || c.securityContext.allowPrivilegeEscalation == {{ .Values.podSecurityPolicy.allowPrivilegeEscalation }})"
      message: "All containers must set allowPrivilegeEscalation to {{ .Values.podSecurityPolicy.allowPrivilegeEscalation }}"
    - expression: "object.kind != 'Pod' || object.spec.containers.all(c, !has(c.securityContext) || !has(c.securityContext.privileged) || c.securityContext.privileged == {{ .Values.podSecurityPolicy.privileged }})"
      message: "All containers must set privileged to {{ .Values.podSecurityPolicy.privileged }}"
    - expression: "['Deployment', 'ReplicaSet', 'DaemonSet', 'StatefulSet', 'Job'].all(kind, object.kind != kind) || object.spec.template.spec.containers.all(c, has(c.securityContext) && has(c.securityContext.runAsNonRoot) && c.securityContext.runAsNonRoot == {{ .Values.podSecurityPolicy.runAsNonRoot }})"
      message: "All workload containers must set runAsNonRoot to {{ .Values.podSecurityPolicy.runAsNonRoot }}"
    - expression: "['Deployment', 'ReplicaSet', 'DaemonSet', 'StatefulSet', 'Job'].all(kind, object.kind != kind) || object.spec.template.spec.containers.all(c, has(c.securityContext) && has(c.securityContext.readOnlyRootFilesystem) && c.securityContext.readOnlyRootFilesystem == {{ .Values.podSecurityPolicy.readOnlyRootFilesystem }})"
      message: "All workload containers must set readOnlyRootFilesystem to {{ .Values.podSecurityPolicy.readOnlyRootFilesystem }}"
    - expression: "['Deployment', 'ReplicaSet', 'DaemonSet', 'StatefulSet', 'Job'].all(kind, object.kind != kind) || object.spec.template.spec.containers.all(c, !has(c.securityContext) || !has(c.securityContext.allowPrivilegeEscalation) || c.securityContext.allowPrivilegeEscalation == {{ .Values.podSecurityPolicy.allowPrivilegeEscalation }})"
      message: "All workload containers must set allowPrivilegeEscalation to {{ .Values.podSecurityPolicy.allowPrivilegeEscalation }}"
    - expression: "['Deployment', 'ReplicaSet', 'DaemonSet', 'StatefulSet', 'Job'].all(kind, object.kind != kind) || object.spec.template.spec.containers.all(c, !has(c.securityContext) || !has(c.securityContext.privileged) || c.securityContext.privileged == {{ .Values.podSecurityPolicy.privileged }})"
      message: "All workload containers must set privileged to {{ .Values.podSecurityPolicy.privileged }}"
    - expression: "object.kind != 'CronJob' || object.spec.jobTemplate.spec.template.spec.containers.all(c, has(c.securityContext) && has(c.securityContext.runAsNonRoot) && c.securityContext.runAsNonRoot == {{ .Values.podSecurityPolicy.runAsNonRoot }})"
      message: "All CronJob containers must set runAsNonRoot to {{ .Values.podSecurityPolicy.runAsNonRoot }}"
    - expression: "object.kind != 'CronJob' || object.spec.jobTemplate.spec.template.spec.containers.all(c, has(c.securityContext) && has(c.securityContext.readOnlyRootFilesystem) && c.securityContext.readOnlyRootFilesystem == {{ .Values.podSecurityPolicy.readOnlyRootFilesystem }})"
      message: "All CronJob containers must set readOnlyRootFilesystem to {{ .Values.podSecurityPolicy.readOnlyRootFilesystem }}"
    - expression: "object.kind != 'CronJob' || object.spec.jobTemplate.spec.template.spec.containers.all(c, !has(c.securityContext) || !has(c.securityContext.allowPrivilegeEscalation) || c.securityContext.allowPrivilegeEscalation == {{ .Values.podSecurityPolicy.allowPrivilegeEscalation }})"
      message: "All CronJob containers must set allowPrivilegeEscalation to {{ .Values.podSecurityPolicy.allowPrivilegeEscalation }}"
    - expression: "object.kind != 'CronJob' || object.spec.jobTemplate.spec.template.spec.containers.all(c, !has(c.securityContext) || !has(c.securityContext.privileged) || c.securityContext.privileged == {{ .Values.podSecurityPolicy.privileged }})"
      message: "All CronJob containers must set privileged to {{ .Values.podSecurityPolicy.privileged }}"
---
apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingAdmissionPolicyBinding
metadata:
  name: {{ include "policychart.fullname" . }}-pod-security-policy-binding
spec:
  policyName: {{ include "policychart.fullname" . }}-pod-security-policy
  validationActions:
    - Deny
{{- end }}
